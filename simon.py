import pygame #needed for graphics
import random #needed to randomize pattern
import math #needed for collision function
import winsound #needed for BEEPS

pygame.init() #initializes Pygame
pygame.display.set_caption("simon!") #sets the window title
screen = pygame.display.set_mode((800, 800)) #creates game screeen

#collision check
def collision(xpos, ypos):
    if math.sqrt((xpos - 400)**2+(ypos - 400)**2)>200:
        print("outside of ring")
    else:
        print("inside of ring")
        
#game variables
xpos = 0
ypos = 0
mousePos = (xpos, ypos) #variable mousePos stores Two numbers in a Tuple
hasClicked = False #this will be used to grab user imput
pattern = [] #this holds the random pattern generated by the machine
playerPattern = [] #this will eventually hold the player pattern
playerTurn = True #keeps track of whos turn it is
pi = 3.1415
ded = False #if player clicks wrong pattern, this will reset everything

# #draw everything first so things don;t appear one at a time
pygame.draw.arc(screen, (209, 59, 59), (200, 200, 400, 400), pi/2, pi, 100)#red
pygame.draw.arc(screen, (51, 176, 70), (200, 200, 400, 400), pi, (3 * pi/2), 100)#green
pygame.draw.arc(screen, (47, 66, 173), (200, 200, 400, 400), (3 * pi/2), 2*pi, 100)#blue
pygame.draw.arc(screen, (249, 255, 143), (200, 200, 400, 400), 2*pi, pi/2, 100)#yellow
pygame.display.flip()


#GAME LOOP#########
while True:
    
    event = pygame.event.wait() #event queue
    #print (pattern)

    #input section---------------
    if event.type == pygame.QUIT: #close game window
        break

    if event.type == pygame.MOUSEBUTTONDOWN:
        hasClicked = True
        print("click")
    
    if event.type == pygame.MOUSEBUTTONUP:
        hasClicked = False

    if event.type == pygame.MOUSEMOTION:
        mousePos = event.pos

    #update section-----------------
    pattern.append(random.randrange(0,4)) #push a new value into the pattern test
    collision(xpos, ypos)
    #play computer pattern
    for i in range(len(pattern)):
        if pattern[i] == 0: #red
            #breifly draw brighter color
            pygame.draw.arc(screen, (255, 0, 0), (200, 200, 400, 400), pi/2,pi, 100)
            pygame.display.flip()
            winsound.Beep(440, 500) #each button has a diffrent pitch sound
        elif pattern[i] == 1: #GREEN
            #briefly draw brighter color
            pygame.draw.arc(screen, (0, 255, 60), (200, 200, 400, 400), pi, (3* pi / 2), 100)
            pygame.display.flip()
            winsound.Beep(640, 500)
        elif pattern[i] == 2: #Blue
            pygame.draw.arc(screen, (0, 38, 255), (200, 200, 400, 400), (3 * pi/2), 2*pi, 100)#blue
            pygame.display.flip()
            winsound.Beep(840, 500)
        elif pattern[i] == 3: #yellow
            pygame.draw.arc(screen, (241, 255, 0), (200, 200, 400, 400), 2*pi, pi/2, 100)#yellow
            pygame.display.flip()
            winsound.Beep(240, 500)
    #render section-----------------
    pygame.draw.arc(screen, (209, 59, 59), (200, 200, 400, 400), pi/2, pi, 100)#red
    pygame.draw.arc(screen, (37, 148, 63), (200, 200, 400, 400), pi, (3 * pi/2), 100)#green
    pygame.draw.arc(screen, (47, 66, 173), (200, 200, 400, 400), (3 * pi/2), 2*pi, 100)#blue
    pygame.draw.arc(screen, (249, 255, 143), (200, 200, 400, 400), 2*pi, pi/2, 100)#yellow
    pygame.display.flip()
    pygame.time.wait(800)
    #game board
#end game loop#############################
pygame.quit()
